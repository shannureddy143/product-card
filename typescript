import React from "react";
import PropTypes from "prop-types";

// ProductCard - simple, accessible product card component
// Props:
// - name: string (required)
// - price: number (required) -> displayed as currency
// - inStock: boolean or number (optional) -> if number, treated as quantity
// - onAddToCart: function (optional)
// - className: string (optional) additional container classes

export default function ProductCard({ name, price, inStock = true, onAddToCart, className = "" }) {
  const isAvailable = typeof inStock === "number" ? inStock > 0 : Boolean(inStock);
  const quantity = typeof inStock === "number" ? inStock : null;

  const formattedPrice = (() => {
    try {
      return new Intl.NumberFormat(undefined, { style: "currency", currency: "USD" }).format(price);
    } catch (e) {
      // fallback if Intl fails or price is not a number
      return String(price);
    }
  })();

  return (
    <article className={`max-w-sm rounded-2xl shadow-md p-4 bg-white ${className}`} aria-label={`Product: ${name}`}>
      <div className="flex items-start justify-between gap-4">
        <div className="flex-1">
          <h3 className="text-lg font-semibold leading-tight truncate" title={name}>{name}</h3>
          <p className="mt-2 text-xl font-medium">{formattedPrice}</p>
        </div>

        <div className="flex flex-col items-end gap-2">
          <span
            className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-semibold ${
              isAvailable ? "bg-emerald-100 text-emerald-800" : "bg-red-100 text-red-800"
            }`}
            aria-live="polite"
          >
            {isAvailable ? "In stock" : "Out of stock"}
          </span>

          {quantity !== null && (
            <small className="text-xs text-gray-500">{quantity} available</small>
          )}
        </div>
      </div>

      <div className="mt-4 flex items-center justify-between">
        <button
          className={`px-4 py-2 rounded-lg font-medium shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-60 disabled:cursor-not-allowed ${
            isAvailable ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-700"
          }`}
          onClick={onAddToCart}
          disabled={!isAvailable || typeof onAddToCart !== "function"}
        >
          Add to cart
        </button>

        <button
          className="text-sm underline text-gray-600 hover:text-gray-800"
          onClick={() => navigator.clipboard?.writeText(name)}
          title="Copy product name"
        >
          Copy name
        </button>
      </div>
    </article>
  );
}

ProductCard.propTypes = {
  name: PropTypes.string.isRequired,
  price: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  inStock: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),
  onAddToCart: PropTypes.func,
  className: PropTypes.string,
};

ProductCard.defaultProps = {
  inStock: true,
  onAddToCart: undefined,
  className: "",
};
